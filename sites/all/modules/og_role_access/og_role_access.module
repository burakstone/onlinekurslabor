<?php

/**
 * Retrieve an array of all roles.
 *
 * @return
 *   An associative array with the role id as the key and the role name as
 *   value.
 */
function og_role_access_og_get_all_roles() {

  $query = db_select('og_role', 'ogr')
    ->fields('ogr', array('rid', 'name'))
    ->orderBy('rid', 'ASC');

  $rids = $query
    ->execute()
    ->fetchAllkeyed();

  return $rids;
}

/**
 * Return all existing groups of an entity type.
 */
function og_role_access_get_all_groups($group_type = 'node') {
  if (!field_info_field(OG_GROUP_FIELD)) {
    return array();
  }

  $query = new EntityFieldQuery();
  $return = $query
    ->entityCondition('entity_type', $group_type)
    ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
    ->execute();

  //return !empty($return[$group_type]) ? array_keys($return[$group_type]) : array();
    if(!empty($return[$group_type])){
      $groups = array();
      $gids = array_keys($return[$group_type]);
      //return $gids;
      foreach($gids as $gid){
        $node = node_load($gid);
        $groups[$node->nid] = $node->title;
      }
      return $groups;
    }
    return array();
}

/**
 * Access callback for the views_plugin_access_role access plugin.
 * Determine if the specified user has access to a view on the basis of any of
 * the requested roles. If the $account argument is omitted, the current user
 * is used.
 */
function og_role_access_og_user_check_roles($group_type, $group_id_arg = '', $rids, $account = NULL) {
	//if the view is a block, there will be no $group_id_arg set.
	if($group_id_arg == ''){
		$group = og_context($group_type);
	}
	
	//if the view is a page, use the $group_id_arg to get and set the og context.
	else{
		$group = og_role_access_og_context_views_page($group_type, $group_id_arg);
	}
	
	//if the group context exists, check the og roles access
	if($group) {
		
	  global $user;
	  
	  //if an account wasn't passed as a variable, use the current user.
	  $account = isset($account) ? $account : $user;
	  
	  //get all of the roles for the user and the group
	  $user_og_roles = og_get_user_roles($group['group_type'], $group['gid'], $account->uid);
	  
	  //get an array of the rids from the user's roles
	  $roles = array_keys($user_og_roles);
	  
	  return user_access('access all views', $account) || array_intersect(array_filter($rids), $roles);
	}
	return FALSE;
}

/**
 * Get or set the og context on a views page.
 *
 * @param $group_type
 *   The group type.
 * @param $group_id_arg
 *   Optional; The position in arg() where the group ID can be found.
 */
function og_role_access_og_context_views_page($group_type = 'node', $group_id_arg = '') {
  global $user;
  $context = &drupal_static(__FUNCTION__, FALSE);
  
  if ($group_id_arg != '' && is_numeric($group_id_arg)) {
    $gid = arg($group_id_arg);
    if (is_numeric($gid)) {
		$context = array('group_type' => $group_type, 'gid' => $gid);
		if ($user->uid) {
			// Save the group ID in the authenticated user's session.
			$_SESSION['og_context'] = $context;
   		}
      	return $context;
	}
  }
  return FALSE;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function og_role_access_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_api().
 */
function og_role_access_views_api() {
  /*
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og_role_access') . '/includes/views',
  );
   * 
   */
}

/**
 * Implements hook_action_info().
 *
 * @see views_bulk_operations_action_info()
 */
function og_role_access_action_info() {
  $actions = array();
  $files = og_role_access_operations_load_action_includes();
  foreach ($files as $filename) {
    $action_info_fn = 'og_role_access_'. str_replace('.', '_', basename($filename, '.inc')).'_info';
    $action_info = call_user_func($action_info_fn);
    if (is_array($action_info)) {
      $actions += $action_info;
    }
  }

  return $actions;
}

/**
 * Loads the VBO actions placed in their own include files.
 *
 * @return
 *   An array of containing filenames of the included actions.
 *
 * @see views_bulk_operations_load_action_includes()
 */
function og_role_access_operations_load_action_includes() {
 static $loaded = FALSE;

  $path = drupal_get_path('module', 'og_role_access') . '/includes/actions/';
  $files = array(
    'add_user_to_group.action.inc',
  );

  if (!$loaded) {
    foreach ($files as $file) {
      include_once $path . $file;
    }
    $loaded = TRUE;
  }

  return $files;
}

/**
 * Implements hook_og_role_grant().
 */
function og_role_access_og_role_grant($entity_type, $gid, $uid, $rid) {
  if (module_exists('og') && module_exists('rules')) {
   rules_invoke_event('og_role_access_og_role_add', $rid, entity_metadata_wrapper('user', $uid));
  }
}

/**
 * Implements hook_og_role_revoke().
 */
function og_role_access_og_role_revoke($entity_type, $gid, $uid, $rid) {
  if (module_exists('og') && module_exists('rules')) {
    rules_invoke_event('og_role_access_og_role_remove', $rid, entity_metadata_wrapper('user', $uid));
  }
}
