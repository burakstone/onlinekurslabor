<?php

module_load_include('inc', 'section_projects', 'inc/functions');

/**
 * Implementing hook_theme
 *
 * @return type
 */
function section_projects_theme() {
  $module_path = drupal_get_path('module', 'section_projects');
  return array(
    'section_projects_tools' => array(
      'template' => 'section_projects_tools',
      'path' => $module_path . '/templates',
      'variables' => array(
        'node_items' => NULL,
        'project_items' => NULL
      ),),
  );
}

function section_projects_menu() {

  $items['projects/%/%/%node'] = array(
    'title' => 'Project Nodes Seal/Unseal Callback',
    'page arguments' => array(1, 2, 3),
    'page callback' => 'section_projects_seal_node_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function section_projects_seal_node_callback($op, $role, $node) {
  global $user;

  $account = clone $user;

  $token = $_GET['projects_token'];
  if (!drupal_valid_token($token, 'projects_seal')) {
    return drupal_access_denied();
  }

  switch ($op) {
    case 'seal':
      switch ($role) {
        case 'dozent':
          if (_section_projects_seal_user_is_responsible_dozent($account, $node)) {
            _section_projects_seal_ca($node, '100');
          }
          break;
        case 'student':
          if (_section_projects_seal_user_is_responsible_student($account, $node)) {
            _section_projects_seal_ca($node, '010');
          }
          break;
        case 'partner':
          if (_section_projects_seal_user_is_responsible_kooperationspartner($account, $node)) {
            _section_projects_seal_ca($node, '001');
          }
          break;
      }
      break;
    case 'unseal':
      switch ($role) {
        case 'dozent':
          if (_section_projects_seal_user_is_responsible_dozent($account, $node)) {
            _section_projects_unseal_ca($node, '100');
          }
          break;
        case 'student':
          if (_section_projects_seal_user_is_responsible_student($account, $node)) {
            _section_projects_unseal_ca($node, '010');
          }
          break;
        case 'partner':
          if (_section_projects_seal_user_is_responsible_kooperationspartner($account, $node)) {
            _section_projects_unseal_ca($node, '001');
          }
          break;
      }
      break;
  }


  $result = array('data' => section_projects_seal_render_action_buttons($node));
  drupal_json_output($result);
  //return 'test';
}

function _section_projects_seal_ca(&$node, $role_code) {
  //get actual seal value
  if (empty($node->field_seal)) {
    $node->field_seal [LANGUAGE_NONE][0]['value'] = 0;
  }
  $node->field_seal[LANGUAGE_NONE][0]['value'] = ($node->field_seal[LANGUAGE_NONE][0]['value']) | bindec($role_code);

  node_save($node);
}

function _section_projects_unseal_ca(&$node, $role_code) {
  //get actual seal value
  if (empty($node->field_seal)) {
    $node->field_seal [LANGUAGE_NONE][0]['value'] = 0;
  }
  $node->field_seal[LANGUAGE_NONE][0]['value'] = ($node->field_seal[LANGUAGE_NONE][0]['value']) ^ bindec($role_code);

  node_save($node);
}

function section_projects_seal_render_action_buttons($node) {

  $button_type = "links";
  $result = '';

  //get actual seal value
  if (empty($node->field_seal)) {
    $node->field_seal[LANGUAGE_NONE][0]['value'] = 0;
  }


    $seal = $node->field_seal[LANGUAGE_NONE][0]['value'];
//projects_cooperation_agreement
    switch ($node->type)
    {
        case 'projects_cooperation_agreement':
            //get needed partners
            //dpm($seal & bindec('100'));
            $parteien = array(
                'dozent' => array('label' => 'Dozent', 'sealed' => ($seal & bindec('100')) == bindec('100')), //dozent
                'student' => array('Student(en)', 'sealed' => ($seal & bindec('010')) == bindec('010')), //student
                'partner' => array('Kooperationspartner', 'sealed' => ($seal & bindec('001')) == bindec('001')), //kooperationspartner
            );
            $button_type = "buttons";
            $links = _section_projects_seal_prepare_action_buttons($parteien, $node);


            break;
        case 'projects_objective':
            $parteien = array(
                'dozent' => array('label' => 'Dozent', 'sealed' => ($seal & bindec('100')) == bindec('100')), //dozent
                'student' => array('Student(en)', 'sealed' => ($seal & bindec('010')) == bindec('010')), //student
            );
            //$links = _section_projects_seal_prepare_action_links($parteien, $node);
            $button_type = "buttons";
            $links = _section_projects_seal_prepare_action_buttons($parteien, $node);
            break;
    }


  $token = drupal_get_token('projects_seal');
  $options = array('query' => array('projects_token' => $token));

  switch ($button_type) {
    case "buttons":
      $result = '<div  class="projects-seal-widget" >';

      foreach ($links as $link) {
        //reset array
        $options = array();
        if ($link['href'] === "#") {
          $options['fragment'] = '';
          $options['external'] = true;
        }
        else
          $options['query'] = array('projects_token' => $token);

        $content = "";
        $result.= '<div  class="entry ' . ($link['href'] === "#" ? '' : 'action') . '" >';

        $options['html'] = true;
        $options['attributes'] = array('title' => $link['title'], 'class' => 'section_projects ' . ($link['href'] === "#" ? 'noaction' : ''));

        if ($link['href'] === "#") {
          $options['fragment'] = '';
          $options['external'] = true;
        }
        $content .= '<div class="' . $link['class'] . ' sprite-background "></div>' . $link['name'];

        $result.= l($content, $link['href'], $options);
        $result.='</div>';
      }
      $result.='</div>';
      $result.='<div style="float:none;"></div>';
      //todo
      $result.='<h5>Vereinbarung</h5>';
      break;


    case "links":
      $result .= '<div class="projects-seal-widget">';
      foreach ($links as $link) {
        $result .= '<div class="action">';
        $result .=!empty($link['href']) ? l($link['title'], $link['href'], $options) : $link['title'];
        $result .= '</div>';
      }
      $result .= '</div>';
      break;
  }


  return $result;
}

/* @deprecated - for extending this function, edit  _section_projects_seal_prepare_action_buttons
 */

function _section_projects_seal_prepare_action_links($parteien, $node) {
  global $user;

  $links = array();

  //dozent
  $link = array();
  if (!empty($parteien['dozent'])) {
    if (_section_projects_seal_user_is_responsible_dozent($user, $node)) {
      //dpm('verantwortlicher dozent');
      if ($parteien['dozent']['sealed']) {
        $link['title'] = 'Dozent: Unterschrift zurückziehen';
        $link['href'] = 'projects/unseal/dozent/' . $node->nid;
      }
      else {
        $link['title'] = 'Dozent: unterschreiben';
        $link['href'] = 'projects/seal/dozent/' . $node->nid;
      }
    }
    else {
      //dpm('nicht verantwortlicher dozent');
      if ($parteien['dozent']['sealed']) {
        $link['title'] = 'Dozent: hat unterschrieben';
      }
      else {
        $link['title'] = 'Dozent: Unterschrift steht aus';
      }
    }
    $links[] = $link;
  }

  //Student
  $link = array();
  if (!empty($parteien['student'])) {
    if (_section_projects_seal_user_is_responsible_student($user, $node)) {
      //dpm('verantwortlicher student');
      if ($parteien['student']['sealed']) {
        $link['title'] = 'Student: Unterschrift zurückziehen';
        $link['href'] = 'projects/unseal/student/' . $node->nid;
      }
      else {
        $link['title'] = 'Student: unterschreiben';
        $link['href'] = 'projects/seal/student/' . $node->nid;
      }
    }
    else {
      //dpm('nicht verantwortlicher student');
      if ($parteien['student']['sealed']) {
        $link['title'] = 'Student: hat unterschrieben';
      }
      else {
        $link['title'] = 'Student: Unterschrift steht aus';
      }
    }
    $links[] = $link;
  }


  //Kooperationspartner
  $link = array();
  //only needed for CA
  if (!empty($parteien['partner'])) {
    if (_section_projects_seal_user_is_responsible_kooperationspartner($user, $node)) {
      //dpm('verantwortlicher partner');
      if ($parteien['partner']['sealed']) {
        $link['title'] = 'Partner: Unterschrift zurückziehen';
        $link['href'] = 'projects/unseal/partner/' . $node->nid;
      }
      else {
        $link['title'] = 'Partner: unterschreiben';
        $link['href'] = 'projects/seal/partner/' . $node->nid;
      }
    }
    else {
      //dpm('nicht verantwortlicher partner');
      if ($parteien['partner']['sealed']) {
        $link['title'] = 'Partner: hat unterschrieben';
      }
      else {
        $link['title'] = 'Partner: Unterschrift steht aus';
      }
    }
    $links[] = $link;
  }


  return $links;
}

function _section_projects_seal_prepare_action_buttons($parteien, $node) {
  global $user;

  $links = array();

  //templates für den linktitel
  $template['withdraw'] = array('title' => '%s: Unterschrift zurückziehen');
  $template['sign'] = array('title' => '%s: unterschreiben');
  $template['signed'] = array('title' => '%s: hat unterschreiben');
  $template['unsigned'] = array('title' => '%s: Unterschrift steht aus');

  foreach ($parteien as $partyname => $partydetails) {
    $is_responsible = false;
    $class = "";
    $link = array();
    $writablename = @$partydetails['label'];
    if (!$writablename)#
      $writablename = @$partydetails['0'];
    switch ($partyname) {
      case 'dozent':
        if (_section_projects_seal_user_is_responsible_dozent($user, $node))
          $is_responsible = true;
        break;
      case 'student':
        if (_section_projects_seal_user_is_responsible_student($user, $node))
          $is_responsible = true;
        $writablename = 'Student';
        break;
      case 'partner':
        if (_section_projects_seal_user_is_responsible_kooperationspartner($user, $node))
          $is_responsible = true;
        $writablename = 'Kooperations-Partner';
        break;
    }
    if ($is_responsible) {
      if ($partydetails['sealed'])
        $class = 'withdraw';
      else
        $class = 'sign';
    } else {
      if ($partydetails['sealed'])
        $class = 'signed';
      else
        $class = 'unsigned';
    }

    $link['title'] = sprintf($template[$class]['title'], $writablename);
    $link['class'] = $class;
    $link['name'] = $writablename;
    if ($is_responsible) {
      $possible_targets = array('withdraw' => 'unseal', 'sign' => 'seal', 'signed' => '#', 'unsigned' => '#');
      # 'projects/unseal/%s/'
      $link['href'] = 'projects/' . $possible_targets[$class] . '/' . $partyname . '/' . $node->nid;
    }
    else
      $link['href'] = '#';

    $links[] = $link;
  }

  return $links;
}

function _section_projects_seal_user_is_responsible_kooperationspartner($account, $node) {
  switch ($node->type) {
    case 'projects_cooperation_agreement':

      if (!empty($node->field_ca_proposal_ref)) {
        $proposal_ref = $node->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id'];
        $proposal_node = node_load($proposal_ref);

        if (!empty($proposal_node->field_partner_organization_ref)) {
          $partner_ref = $proposal_node->field_partner_organization_ref[LANGUAGE_NONE][0]['target_id'];
          $partner_node = node_load($partner_ref);
          if (!empty($partner_node->field_field_po_contact_person)) {
            foreach ($partner_node->field_field_po_contact_person[LANGUAGE_NONE] as $contact_user) {
              $uid = $contact_user['target_id'];
              if ($account->uid == $uid) {
                return TRUE;
              }
            }
          }
        }
      }
      break;
    case 'projects_objective':
      break;
  }

  return FALSE;
}

function _section_projects_seal_user_is_responsible_dozent($account, $node) {
  switch ($node->type) {
    case 'projects_cooperation_agreement':
      //get dozenten of this course
      //only possible if course group is set
      if (!empty($node->field_ca_course_group_ref)) {
        $course_group_nid = $node->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        //$course = node_load($course_nid);
        //$dozenten = og_membership_load_multipleF(ALSE, array('gid' => $course_nid, 'entity_type' => 'user'));
        $dozenten = custom_general_get_users_in_group_by_role($course_nid, array('kurs-dozent'));
        //dpm($dozenten);

        foreach ($dozenten as $dozent) {
          if ($dozent->uid == $account->uid) {
            return TRUE;
          }
        }
      }
      //check author of the cooperation agreement - needed if no course group was set
      if ($node->uid == $account->uid) {
        return TRUE;
      }
      break;
    case 'projects_objective':
      //dpm(($node));
      if (!empty($node->field_ca_ref)) {
        $ca_node_nid = $node->field_ca_ref[LANGUAGE_NONE][0]['target_id'];
        $ca_node = node_load($ca_node_nid);
        $course_group_nid = $ca_node->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        //$course = node_load($course_nid);
        //$dozenten = og_membership_load_multipleF(ALSE, array('gid' => $course_nid, 'entity_type' => 'user'));
        $dozenten = custom_general_get_users_in_group_by_role($course_nid, array('kurs-dozent'));
        //dpm($dozenten);

        foreach ($dozenten as $dozent) {
          if ($dozent->uid == $account->uid) {
            return TRUE;
          }
        }
      }
      break;
  }

  return FALSE;
}

function _section_projects_seal_user_is_responsible_student($account, $node) {

  switch ($node->type) {
    case 'projects_cooperation_agreement':
      //check student's course group
      //only possible if course group is set
      if (!empty($node->field_ca_course_group_ref)) {
        $course_group_nid = $node->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course = node_load($course_nid);
        //get users course group in course
        if (_section_courses_get_coursegroup_gid($account->uid, $course) == $course_group_nid) {
          return TRUE;
        }
      }
      //check if student ist explicitely mentioned
      if (!empty($node->field_ca_student_refs)) {
        if ($node->field_ca_student_refs[LANGUAGE_NONE][0]['target_id'] == $account->uid) {
          return TRUE;
        }
      }

      break;
    case 'projects_objective':
       //check student's course group
      //only possible if course group is set
           if (!empty($node->field_ca_ref)) {
          $ca = node_load($node->field_ca_ref[LANGUAGE_NONE][0]['target_id']);
        }
      if (!empty($ca->field_ca_course_group_ref)) {
        $course_group_nid = $ca->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course = node_load($course_nid);
        //get users course group in course
        if (_section_courses_get_coursegroup_gid($account->uid, $course) == $course_group_nid) {
          return TRUE;
        }
      }
      //check if student ist explicitely mentioned
      if (!empty($ca->field_ca_student_refs)) {
        if ($ca->field_ca_student_refs[LANGUAGE_NONE][0]['target_id'] == $account->uid) {
          return TRUE;
        }
      }

      break;
  }

  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function section_projects_block_info() {
  $blocks = array();

  //navigation + header blcok
  $blocks['projects_header_and_navigation'] = array(
    'info' => t('Projects Header And Navigation'),
  );

  $blocks['projects_po_tools'] = array(
    'info' => t('Project - Tools'),
  );

  $blocks['projects_course_group_actions'] = array(
    'info' => t('Project - Course Group - Actions'),
  );

  $blocks['project_cockpit_main'] = array(
    'info' => t('Projects - Cockpit - Main'),
  );

  return $blocks;
}

//add course header
//16.07.2013 - 11:58 - SN - now done by context module
function section_projects_preprocess_page(&$vars) {
  $active_projects = section_projects_get_active_project();

  if ($active_projects) {

    drupal_add_js(drupal_get_path('module', 'section_projects') . "/js/section_projects.js");
    drupal_add_css(drupal_get_path('module', 'section_projects') . "/css/section_projects.css");

    /*
      $block = module_invoke('section_spaces', 'block_view', 'space_header_section');
      $vars['page']['header']['space_header_section'] = array(
      '#markup' => render($block),
      '#weight' => -10
      ); */

    //uasort($vars['page']['header'], 'element_sort');
  }
}

/**
 * Implements hook_block_view().
 */
function section_projects_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'projects_header_and_navigation':
      $block['content'] = _section_projects_header_and_navigation_view();
      break;
    case 'projects_po_tools' :
      $block['content'] = _section_projects_po_tools_view();
      break;
    case 'projects_course_group_actions' :
      $block['content'] = _section_projects_course_group_actions_view();
      break;
    case 'project_cockpit_main' :
      $block['content'] = _section_projects_project_cockpit_main_view();
      break;
  }

  return $block;
}

function _section_projects_header_and_navigation_view() {


  $output = '';


  //partnerübersicht
  $arg2 = arg(2);
  //partnerorganisation
  $arg3 = arg(3);
  //projektvorschlag
  $arg4 = arg(4);

  if (!isset($arg2)) {
    //projects overview page
    $output = '';
  } 

  //header for partner -> projektvorschlag -> cockpit
  if (is_numeric($arg2) || $arg2 == 'add') {

    //partner organisation
    $query = (drupal_get_query_parameters());
        if ($arg2 == 'add')
        {
            if ($arg3 == 'projects_proposal' || $arg3 == 'projects_cooperation_agreement')
            {
                $po_node = node_load($query['field_partner_organization_ref']);
            }
            elseif ($arg3 == 'projects_objective')
                $po_node = node_load($query['field_ca_ref']);
            else
            {
                $po_node = node_load($query['og_group_ref']);
            }
        }
    else {
      $po_node = node_load($arg2);
    }

    if ($po_node->type !== NM_PROJECTS_RROJEKTORGANISATION) {
      if ($po_node->type == NM_PROJECTS_KOOPERATIONSVEREINBARUNG) {
        $ca = $po_node;
        $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
        $partner_nid = _custom_general_get_group($proposal);
        $po_node = node_load($partner_nid);
      }
      else if ($po_node->type == NM_PROJECTS_PROJEKTVORSCHLAG) {
        $proposal = $po_node;
        $partner_nid = _custom_general_get_group($proposal);
        $po_node = node_load($partner_nid);
      }
      else if (in_array($po_node->type, array(NM_PROJECTS_ZIELVEREINBARUNG, NM_PROJECTS_DOKUMENTATION, NM_PROJECTS_TAGEBUCH))) {
        $tmp = $po_node;
        if (!empty($tmp->field_ca_ref)) {
          $ca = node_load($tmp->field_ca_ref[LANGUAGE_NONE][0]['target_id']);
        }
        else {
          $ca = node_load($tmp->og_group_ref[LANGUAGE_NONE][0]['target_id']);
        }

        $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
        $partner_nid = _custom_general_get_group($proposal);
        $po_node = node_load($partner_nid);
      }
    }

    $output .= '<div style="position:relative">';

    $output .= '<div id="course_header" class="row-fluid">';
    $output .= '<div class="span12">';

    $output .= '<div id="course_header_title">';
    $output .= '<h1>';
    $output .= l($po_node->title, 'node/' . $po_node->nid);
    $output .= '</h1>';

    if (is_numeric($arg3) && !empty($arg4)) {
      $ca_node = node_load($arg3);
      $output .= '<h4>';
      $output .= l($ca_node->title, 'node/' . $ca_node->nid);
      $output .= '</h4>';
    }
    else if ($arg3 == 'edit') {
      if ($po_node->type == NM_PROJECTS_KOOPERATIONSVEREINBARUNG) {
        $ca = $po_node;
        $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
      }
      else if (in_array($po_node->type, array(NM_PROJECTS_ZIELVEREINBARUNG, NM_PROJECTS_DOKUMENTATION, NM_PROJECTS_TAGEBUCH))) {
        $tmp = node_load($arg2);
        if (!empty($tmp->field_ca_ref)) {
          $ca = node_load($tmp->field_ca_ref[LANGUAGE_NONE][0]['target_id']);
        }
        else {
          $ca = node_load($tmp->og_group_ref[LANGUAGE_NONE][0]['target_id']);
        }

        $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
      }
      $output .= '<h4>';
      $output .= l($proposal->title, 'node/' . $proposal->nid);
      $output .= '</h4>';

      $output .= '<h3>';
      $output .= l($ca->title, 'node/' . $ca->nid);
      $output .= '</h3>';

    }
     else if ($arg2 == 'add' && ($arg3 != 'projects_proposal' && $arg3 != 'projects_cooperation_agreement' && $arg3 !='projects_objective')) {
 

      $query = (drupal_get_query_parameters());
      $ca = node_load($query['og_group_ref']);
      $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);

      $output .= '<h4>';
      $output .= l($proposal->title, 'node/' . $proposal->nid);
      $output .= '</h4>';

      $output .= '<h3>';
      $output .= l($ca->title, 'node/' . $ca->nid);
      $output .= '</h3>';
    }


    $output .= '</div>';

    //header here
    $header_pic = '';
    if (isset($po_node->field_po_header)) {
      //$field_items = field_get_items('node', $active_course, 'field_course_header');
      $field_view = field_view_field('node', $po_node, 'field_po_header', array('settings' => array('image_style' => 'course_header')));
      //$field_view['#label_display'] = 'hidden';
      $uri = $field_view['#items'][0]['uri'];

      $url = image_style_url('course_header', $uri);

      //$url = parse_url($url_array);
      //        dpm($url);
      //$path = $url['path'];
      $path = $url;
      //dpm($active_course->field_course_header);
      //$url_array = file_create_url($uri);
      //$url = parse_url($url_array);
      //$path = $url['path'];
      $header_pic = '<div style="
        background-image:url(' . $path . ');
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
        height:200px;
        ">
        </div>';
    }
    $output .= $header_pic;

    $output .= '</div>';

    //partner logo
    $field_view = field_view_field('node', $po_node, 'field_po_logo', array('settings' => array('image_style' => 'projects_logo')));
    $field_view['#label_display'] = 'hidden';
    $output .= '<div class="row-fluid" style="position:absolute; height:100%">';
    $output .= '<div style="height:100%;" class="offset8 span4">';
    $output .= '<div style="position:absolute; bottom:20px; z-index:10; width:32%; text-align:center;">';
    $output .= '<a href="' . url("node/" . $po_node->nid) . '">';
    $output .= drupal_render($field_view);
    $output .= '</a>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '<div class="row-fluid" style="position:absolute; height:100%">';
    $output .= '<div style="position:absolute; background-color: #fff; opacity:0.6; height:100%;" class="offset8  span4">';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    //partner logo end
    //container
    $output .= "</div>";
  }

  //+navigation
  if (is_numeric($arg2) && is_numeric($arg3) && ($arg4 == 'cockpit')) {
    //projects overview page
    $output .= _section_projects_project_cockpit_tabs_view();
  }

  $block = array(
    'content' => array(
      '#type' => 'markup',
      '#markup' => $output,
  ));


  return $block;
}

function _section_projects_project_cockpit_main_view() {
  $navigation_items = _section_projects_get_navigation_items();

  $block = array();
  $active_project = section_projects_get_active_project();

  if (!isset($active_project) || empty($active_project))
    return array();

  if ($active_project) {
    $output = "";
    $output .= '<div style="position:relative" class="projects_cockpit_main_container">';
    $i = 0;

    foreach ($navigation_items as $item) {
      $active_class = ($i == 0) ? 'active' : '';

      $output .= '<div class = "tabpanel ' . drupal_html_class(transliteration_get($item)) . ' ' . $active_class . ' row-fluid">';

      $output .= '<div class = "span12" >';
      //dpm('projects_cockpit_main_' . drupal_html_class($item) . '_view');
      $output .= call_user_func('projects_cockpit_main_' . drupal_html_class(transliteration_get($item)) . '_view');
      $output .= '</div>';

      $output .= '</div>';
      $i++;
    }

    $output .= '</div>';

    $block = array(
      'content' => array(
        '#type' => 'markup',
        '#markup' => $output,
    ));
  }

  return $block;
}

function _section_projects_project_cockpit_tabs_view() {

  $navigation_items = _section_projects_get_navigation_items();


  $block = array();
  $active_project = section_projects_get_active_project();

  if (!isset($active_project) || empty($active_project))
    return array();

  $i = 0;
  if ($active_project) {
    $output = '<div class="row-fluid">';
    $output .= '<div style="position:relative" class="nav-tabbox span12">';
    foreach ($navigation_items as $item) {
      $active_class = ($i == 0) ? 'active' : '';
      $output .= '<div class="' . $active_class . '">';
      $output .= '<a href = "#' . drupal_html_class(transliteration_get($item)) . '" class="tab ' . drupal_html_class(transliteration_get($item)) . '">';
      $output .= $item;
      $output .= '</a>';
      $output .= '</div>';

      $i++;
    }

    $output .= '</div>';
    $output .= '</div>';
  }

  return $output;
}

function _section_projects_po_tools_view() {
  global $user;
  $account = clone $user;

  $output = '';

  if (_section_projects_tools_access()) {

    $active_project = section_projects_get_active_project();

    if (!$active_project)
      return $output;

    $node_items = array();
    $node_items['title'] = '';
    $node_items['items'] = array();

    /*
      //Projektvorschlag
      if (arg(1) == 'partners' && is_numeric(arg(3))) {
      $node_items = array('title' => 'Projektvorschlag');
      $node_items['items'][] = array(
      'name' => 'projektvorschlag_bearbeiten',
      'path' => url('projects/admin/' . arg(3) . '/edit'),
      'link' => l('Projektvorschlag bearbeiten', 'projects/admin/' . arg(3) . '/edit'));
      }
      else {
      //Projektorganisation
      $node_items = array('title' => 'Partnerorganisation');
      $node_items['items'] = array('title' => 'Partnerorganisation');
      $node_items['items'][] = array(
      'name' => 'partnerorganisation_bearbeiten',
      'path' => url('projects/admin/' . $active_project->nid . '/edit'),
      'link' => l('Partnerorganisation bearbeiten', 'projects/admin/' . $active_project->nid . '/edit')
      );
      } */

    $context_items = array();
    $context_items['title'] = '';
    $context_items['items'] = array();

    $context_items = array('title' => 'Aktionen');
    $context_items['items'] = array();

    //Create Proposal
    //Dozent + Kooperationspartner
    if (array_intersect(array(NM_ROLE_DOZENT, NM_ROLE_KOOPERATIONSPARTNER, NM_ROLE_ADMIN), $user->roles)) {
      //dont display in cockpit
      if (arg(0) == 'projects' && arg(4) != 'cockpit') {
        $context_items['items'][] = array(
          'name' => 'projektvorschlag',
          'path' => url('projects/admin/add/' . NM_PROJECTS_PROJEKTVORSCHLAG),
          'link' => l('Idee', 'projects/admin/add/' . NM_PROJECTS_PROJEKTVORSCHLAG, array(
            'query' => array(
              'field_partner_organization_ref' => $active_project->nid,
        )))
        );


        if (arg(1) == 'partners' && is_numeric(arg(3))) {
          $context_items['items'][] = array(
            'name' => 'kooperationsvereinbarung',
            'path' => url('projects/admin/add/' . NM_PROJECTS_KOOPERATIONSVEREINBARUNG),
            'link' => l('Koop Ver', 'projects/admin/add/' . NM_PROJECTS_KOOPERATIONSVEREINBARUNG, array(
              'query' => array(
                'field_partner_organization_ref' => $active_project->nid,
                'field_ca_proposal_ref' => arg(3),
          )))
          );
        }
      }
    }

    //24.07.2014 - 16:00 - SN : check if we already have one first!
    //lernzielvereinbarung + dokumentation only 1  for each cooperation agreement
    //Student + Dozent
    if (arg(0) == 'projects' && arg(4) == 'cockpit' && is_numeric(arg(5))) {
      if (array_intersect(array(NM_ROLE_DOZENT, NM_ROLE_STUDENT, NM_ROLE_ADMIN), $user->roles)) {

        $ca_node = node_load(arg(5));

        $objective_node = _section_projects_get_objective_by_ca($ca_node);
        //check if lernzielverinbarung already exists
        if (empty($objective_node)) {
          $context_items['items'][] = array(
            'name' => 'lernzielvereinbarung',
            'path' => url('projects/admin/add/' . NM_PROJECTS_ZIELVEREINBARUNG),
            'link' => l('Lernzielvereinbarung erstellen', 'projects/admin/add/' . NM_PROJECTS_ZIELVEREINBARUNG, array(
              'query' => array(
                'field_ca_ref' => arg(5),
          ))));
        }
      }
    }

    //Student + Dozent
    if (arg(0) == 'projects' && arg(4) == 'cockpit' && is_numeric(arg(5))) {
      if (array_intersect(array(NM_ROLE_DOZENT, NM_ROLE_STUDENT, NM_ROLE_ADMIN), $user->roles)) {
        $ca_node = node_load(arg(5));
        $documentation_node = _section_projects_get_documentation_by_ca($ca_node);
        if (empty($documentation_node)) {
          $context_items['items'][] = array(
            'name' => 'dokumentation',
            'path' => url('projects/admin/' . $active_project->nid . '/edit'),
            'link' => l('Dokumentation erstellen', 'projects/admin/add/' . NM_PROJECTS_DOKUMENTATION, array(
              'query' => array(
                'field_ca_ref' => arg(5),
          ))));
        }
      }
    }

    if (arg(1) == 'partners' && is_numeric(arg(3))) {
      //check if cooperation agreement available
      $proposal = node_load(arg(3));
      $cas = _section_projects_get_cooperation_agreements($proposal);

      if (count($cas) > 0 && arg(4) != 'cockpit') {
        //extracting the first resul
        //multicontext possible!
        $ca = current($cas);
        //dpm($ca);
        //18.06.2014 - 17:46 - SN
        //taking latest ca, possibility to select another context in cockpit section
        $context_items['items'][] = array(
          'name' => 'cockpit',
          'path' => url('projects/partners/' . $active_project->nid . '/' . arg(3) . '/cockpit/' . $ca->nid),
          'link' => l('Cockpit', 'projects/partners/' . $active_project->nid . '/' . arg(3) . '/cockpit/' . $ca->nid));
      }

      //context cooperation agreement set?
      if (is_numeric(arg(4)) || (arg(4) == 'cockpit') && is_numeric(arg(5))) {
        //check context -> cockpit
        $context_items['items'][] = array(
          'name' => 'tagebuch',
          'path' => url('projects/admin/add/' . NM_PROJECTS_TAGEBUCH),
          'link' => l(' Tagebuch', 'projects/admin/add/' . NM_PROJECTS_TAGEBUCH, array(
            'query' => array(
              'og_group_ref' => arg(5),
        ))));


        $ca = current($cas);

        //setting / edit cooperation agreement
        $context_items['items'][] = array(
          'name' => 'cooperationagreement',
          'path' => url('projects/admin/' . $ca->nid . '/edit'),
          'link' => l('Projekt', 'projects/admin/' . $ca->nid . '/edit', array(
            'query' => array(
              'og_group_ref' => arg(5),
        ))));
      }
    }

    $output = theme('section_projects_tools', array('node_items' => $node_items, 'context_items' => $context_items));
  }

  $block = array(
    'content' => array(
      '#type' => 'markup',
      '#markup' => $output,
  ));

  return $block;
}

function _section_projects_course_group_actions_view() {
  $output = '';

  $output .= '<div>';

  $active_course = _section_courses_get_active_course();
  //check if course group has a project assigned to it
  if ($active_course && arg(0) == 'course' && arg(1) == 'groups' && is_numeric(arg(3))) {
    $active_course_group = node_load(arg(3));
    $proposal_nid = _section_courses_course_group_get_proposal($active_course_group);

    if ($proposal_nid) {
      //$output .= $proposal_nid;
      $proposal = node_load($proposal_nid);
      $partner_nid = $proposal->field_partner_organization_ref[LANGUAGE_NONE][0]['target_id'];
      // l('Zum Cockpit', 'projects/partners/' . $active_project->nid . '/' . arg(3) . '/cockpit/' . $ca->nid);

      $cas = _section_projects_get_cooperation_agreements($proposal);

      if (count($cas) > 0) {
        //extracting the first resul
        //multicontext possible!
        $ca = current($cas);
        //dpm($ca);
        //18.06.2014 - 17:46 - SN
        //taking latest ca, possibility to select another context in cockpit section

        $output .= '<a href="/' . NM_COURSE_PROJECTS_PARTNERS_PATH . $partner_nid . '/' . $proposal_nid . '/cockpit/' . $ca->nid . '">Zum Projektcockpit</a>';
      }
    }
  }
  $output .= '</div>';

  return $output;
}

/*
  function _section_projects_node_tabs_view() {
  $output = '';

  if (_section_projects_tools_access()) {
  $output .= '<div id="content_node_tabs-container" class="btn-grop row-fluid">';
  $output .= '<ul class="span12">';
  $output .= '<li>';
  $output .= l('Ansicht', 'projects/partners/1419');
  $output .= '</li>';
  $output .= '<li>';
  $output .= l('Bearbeiten', 'projects/admin/1419/edit');
  $output .= '</li>';
  $output .= '</ul>';
  $output .= '</div>';
  }
  $block = array(
  'content' => array(
  '#type' => 'markup',
  '#markup' => $output,
  ));

  return $block;
  }
 */

/**
 * HELPER FUNCTIONS
 */

/**
 *
 * @global type $user
 */
function _section_projects_tools_access($account = NULL) {
  if (!$account) {
    global $user;
    $account = clone $user;
  }

  if (array_intersect($account->roles, array(NM_ROLE_ADMIN,NM_ROLE_DOZENT, NM_ROLE_KOOPERATIONSPARTNER, NM_ROLE_STUDENT, NM_ROLE_TEST_STUDENT))) {
    return TRUE;
  }

  return FALSE;
}

function section_projects_get_active_project($reset = FALSE) {
  static $project;

  if (!(section_projects_context())) {
    return FALSE;
  }

  if (!isset($project) || $reset) {
    if (arg(2) == 'add') {
      $query = (drupal_get_query_parameters());
      //30.11.2014 - 14:03 - SN
      if(arg(3) == 'projects_proposal' || arg(3) == 'projects_cooperation_agreement') {
        $project = node_load($query['field_partner_organization_ref']);
      }else {
        $project = node_load(@$query['og_group_ref']?: $query['field_ca_ref']);
      }
    }
    else {
      $project_nid = arg(2);
      $project = node_load($project_nid);
    }
  }

  return $project;
}

function section_projects_context() {
  static $context;

  if (empty($context)) {
    $context = context_isset("context", "section_projects");
  }

  if (empty($context)) {
    custom_general_init();
    $context = context_isset("context", "section_projects");
  }

  if (empty($context))
    return FALSE;

  return TRUE;
}

/*
 * alter links of nodes related to projects
 */

function section_projects_url_outbound_alter(&$path, &$options, &$original_path) {

  $project = section_projects_get_active_project();

  if ($project || section_projects_context()) {
    /*
     *
     * forum node links
     */

    if (strstr($path, "node/")) {
      $regex = '#^node/([0-9]+)$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $nid = $matches[1];
        //solution for biblio and course text needed
        $type = _custom_general_get_node_type($nid);

        if ($type == NM_PROJECTS_PROJEKTVORSCHLAG) {
          if ($project) {
            $path = "projects/partners/" . $project->nid . '/' . $nid;
          }
          else {
            $node = node_load($nid);
            //get project group the which proposal belongs to
            $entities = og_get_entity_groups('node', $node->nid);
            $group_nid = -1;
            if (!empty($entities)) {
              $group_nid = current(current($entities));
            }
            $path = "projects/partners/" . $group_nid . '/' . $nid;
          }
        }
        else if ($type == NM_PROJECTS_RROJEKTORGANISATION) {
          $path = "projects/partners/" . $nid;
        }
        else if ($type == NM_PROJECTS_KOOPERATIONSVEREINBARUNG) {
          $ca = node_load($nid);
          $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
          $partner_nid = _custom_general_get_group($proposal);
          $path = "projects/partners/" . $partner_nid . "/" . $proposal->nid . "/cockpit/" . $nid;
        }
        else if ($type == NM_PROJECTS_ZIELVEREINBARUNG) {
          $objective = node_load($nid);

          $tmp = $objective;
          if (!empty($tmp->field_ca_ref)) {
            $ca = node_load($tmp->field_ca_ref[LANGUAGE_NONE][0]['target_id']);
          }
          else {
            $ca = node_load($tmp->og_group_ref[LANGUAGE_NONE][0]['target_id']);
          }

          $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
          $partner_nid = _custom_general_get_group($proposal);
          //$po_node = node_load($partner_nid);

          $path = "projects/partners/" . $partner_nid . "/" . $proposal->nid . "/cockpit/" . $ca->nid;
        }
        else if ($type == NM_PROJECTS_DOKUMENTATION) {
          $docu = node_load($nid);

          $tmp = $docu;
          if (!empty($tmp->field_ca_ref)) {
            $ca = node_load($tmp->field_ca_ref[LANGUAGE_NONE][0]['target_id']);
          }
          else {
            $ca = node_load($tmp->og_group_ref[LANGUAGE_NONE][0]['target_id']);
          }

          $proposal = node_load($ca->field_ca_proposal_ref[LANGUAGE_NONE][0]['target_id']);
          $partner_nid = _custom_general_get_group($proposal);
          //$po_node = node_load($partner_nid);

          $path = "projects/partners/" . $partner_nid . "/" . $proposal->nid . "/cockpit/" . $ca->nid;
        }
      }
    }
  }
}

/*
 *  Webform - Survey Umfrage
 */

/**
 * Provide a select options component to Webform. The values are
 * populated via a callback function, which returns
 * an array of nodes.
 *
 * @return void
 * @author Kosta Harlan
 */
function section_projects_webform_select_options_info() {
  $items = array();

  if (function_exists('_section_projects_get_proposal_nodes')) {
    $items['proposal-nodes'] = array(
      'title' => t('Proposal nodes'),
      'options callback' => '_section_projects_get_proposal_nodes',
    );
  }

  return $items;
}

/**
 * Returns an array of Story nodes keyed on the node ID.
 *
 * @return array
 * @author Kosta Harlan
 */
function _section_projects_get_proposal_nodes() {
  $nodes = array();

  $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', NM_PROJECTS_PROJEKTVORSCHLAG)
      ->execute();

  foreach ($result as $node) {
    $nodes[$node->nid] = $node->title;
  }
  return $nodes;
}
function _section_projects_get_nodes($type) {
  $nodes = array();

  $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', $type)
      ->execute();

  foreach ($result as $node) {
    $nodes[$node->nid] = $node->title;
  }
  return $nodes;
}
/**
 *  COCKPIT
 */

/**
 * tab items for project cockpit
 * @return string
 */
function _section_projects_get_navigation_items() {
  $tab_items = array(
    'Durchführung',
    'Kooperationsvereinbarung',
    'Lernzielvereinbarung',
    'Dokumentation'
  );

  return $tab_items;
}

function projects_cockpit_main_durchfuehrung_view() {
  $output = '';

  $p_proposal = NULL;
  if (is_numeric(arg(5))) {
    $p_proposal = arg(5);
  }


  //dpm($p_proposal);
  //submit form
  $output .= theme('nm_stream_stream_node_form', array('node' => NULL, 'type' => 'projects_blog'));

  $view_name = 'projects_tagebucheintr_ge';
  $display_name = 'panel_proposal_blogs_entries';
  $view = views_get_view($view_name);
  //dpm($view);
  if (is_object($view)) {
    $view->set_display($view_name);
    $view->set_arguments(array($p_proposal));
    $view->pre_execute();
    $output .= $view->render($display_name);
  }
  //$output .= _nm_stream_form_add_edit_view(NM_PROJECTS_TAGEBUCH);
  //$output = 'view';

  return $output;
}

function _section_projects_render_node_tabs($node) {
  //tabs view/edit
  $options = array(
    'attributes' => array(),
    'query' => array()
  );
  $options['attributes']['class'] = array('btn');

  if(!node_access('update', $node)){
     return '';
  }

  //$parsed = drupal_parse_url(current_path());
  //get the right fragment
  $fragment = '';
  switch ($node->type) {
    case NM_PROJECTS_DOKUMENTATION:
      $fragment = 'dokumentation';
      break;
    case NM_PROJECTS_KOOPERATIONSVEREINBARUNG:
      $fragment = 'kooperationsvereinbarung';
      break;
    case NM_PROJECTS_TAGEBUCH:
      $fragment = 'durchfuehrung';
      break;
    case NM_PROJECTS_ZIELVEREINBARUNG:
      $fragment = 'lernzielvereinbarung';
      break;
  }
  $options['fragment'] = $fragment;

  //active link not set properly, using url() function to avoid this probplem
  $options['attributes']['class'] = array('btn');
  $tabs = array();
  if (substr(url('node/' . $node->nid), 0, 1) == '/') {
    $path = substr(url('node/' . $node->nid), 1);
    $result['path'] = $path;
    $result['link'] = l("Ansicht", $path, $options);
  }
  else {
    $path = url('node/' . $node->nid);
    $result['path'] = $path;
    $result['link'] = l("Ansicht", $path, $options);
  }
  $tabs['overview'] = $result;

  $path = 'projects/admin/' . $node->nid . '/edit';
  $result['path'] = $path;
  $result['link'] = l("Bearbeiten", $path, $options);
  $tabs['edit'] = $result;

  return _custom_general_theme_tools_block($tabs, "content_node_tabs", "btn-grop");
}

function projects_cockpit_main_kooperationsvereinbarung_view() {
  $output = '';

  if (is_numeric(arg(5))) {
    $ca_node = node_load(arg(5));


    $output .=_section_projects_render_node_tabs($ca_node);

    $output .= "<h4>Kooperationsvereinbarung</h4>";

    $output .= "<h5>Signaturen</h5>";
    $output .= section_projects_seal_render_action_buttons($ca_node);

    //$timespan_items = field_get_items('node', $ca_node, 'field_ca_timespan');
    //$output .= "zeitlicher Rahmen: " . drupal_render(field_view_value('node', $ca_node, 'field_ca_timespan', $timespan_items[0]));

    $node_view = node_view($ca_node);
    $node_view['links']['#access'] = FALSE;
    $output .= drupal_render($node_view);

    //$output .= render(node_view($ca_node, 'nm_stream'));
    //$output .= theme('nm_stream_node_comment_form', array('node' => $ca_node));

    $comments = comment_load_multiple(_nm_stream_comment_get_thread($ca_node, COMMENT_MODE_THREADED, 0));
    if (!empty($comments)) {
      comment_prepare_thread($comments);
    }

    $comments_container = '';
    foreach ($comments as $comment) {
      $opi = theme('nm_stream_node_comment', array('comment' => $comment));

      //dpm($comment->divs);
      $is_threaded = isset($comment->divs) && variable_get('comment_default_mode_' . $ca_node->type, COMMENT_MODE_THREADED) == COMMENT_MODE_THREADED;

      $prefix = '';
      $suffix = '';
      if ($is_threaded) {
        $prefix = $comment->divs <= 0 ? str_repeat('</div>', abs($comment->divs)) : "\n" . '<div class="indented">';

        // Close all open divs.
        if ($is_threaded && !empty($comment->divs_final)) {
          $suffix = str_repeat('</div>', $comment->divs_final);
        }
      }

      $comments_container .= $prefix . $opi . $suffix;
    }

    $pre = '<div class="nm-stream-node-container" id="nm-stream-node-comment-' . $ca_node->nid . '">';
    $suff = '</div>';

    $output = $output;

    $comment_form = theme('nm_stream_node_comment_form', array('node' => $ca_node));
    $output .= '<div class="nm-stream-comments-section" style="padding: 15px 15px;""><h3>Kommentare</h3><div id="nm-stream-node-' . $ca_node->nid . '"><div class="nm-stream-comments-container">' . $comments_container . '</div></div></div>' . $pre . $comment_form . $suff;

    //$output .= drupal_render(drupal_get_form("comment_node_{$ca_node->type}_form", (object) array('nid' => $ca_node->nid)));
  }



  return $output;
}

function projects_cockpit_main_lernzielvereinbarung_view() {
  $output = '';

  if (is_numeric(arg(5))) {
    $ca_node = node_load(arg(5));

    $objective_node = _section_projects_get_objective_by_ca($ca_node);

    $output .= "<h4>Lernzielvereinbarung</h4>";

    if (empty($objective_node)) {
      $output .= 'Keine Lernzielvereinbarung gefunden. Todo Anlegen link..';

      return $output;
    }

    $objective_node = node_load($objective_node->nid);

    $output .=_section_projects_render_node_tabs($objective_node);

    $output .= "<h5>Signaturen</h5>";
    $output .= section_projects_seal_render_action_buttons($objective_node);


    $objective_node = node_load($objective_node->nid);

    //$timespan_items = field_get_items('node', $ca_node, 'field_ca_timespan');
    //$output .= "zeitlicher Rahmen: " . drupal_render(field_view_value('node', $ca_node, 'field_ca_timespan', $timespan_items[0]));

    $node_view = node_view($objective_node);
    $node_view['links']['#access'] = FALSE;
    $output .= drupal_render($node_view);

    //$output .= render(node_view($ca_node, 'nm_stream'));
    //$output .= theme('nm_stream_node_comment_form', array('node' => $ca_node));

    $comments = comment_load_multiple(_nm_stream_comment_get_thread($objective_node, COMMENT_MODE_THREADED, 0));
    if (!empty($comments)) {
      comment_prepare_thread($comments);
    }

    $comments_container = '';
    foreach ($comments as $comment) {
      $opi = theme('nm_stream_node_comment', array('comment' => $comment));

      //dpm($comment->divs);
      $is_threaded = isset($comment->divs) && variable_get('comment_default_mode_' . $objective_node->type, COMMENT_MODE_THREADED) == COMMENT_MODE_THREADED;

      $prefix = '';
      $suffix = '';
      if ($is_threaded) {
        $prefix = $comment->divs <= 0 ? str_repeat('</div>', abs($comment->divs)) : "\n" . '<div class="indented">';

        // Close all open divs.
        if ($is_threaded && !empty($comment->divs_final)) {
          $suffix = str_repeat('</div>', $comment->divs_final);
        }
      }

      $comments_container .= $prefix . $opi . $suffix;
    }


    $pre = '<div class="nm-stream-node-container" id="nm-stream-node-comment-' . $objective_node->nid . '">';
    $suff = '</div>';

    $output = $output;


    $comment_form = theme('nm_stream_node_comment_form', array('node' => $objective_node));
    $output .= '<div class="nm-stream-comments-section" style="padding: 15px 15px;""><h3>Kommentare</h3><div id="nm-stream-node-' . $objective_node->nid . '"><div class="nm-stream-comments-container">' . $comments_container . '</div></div></div>' . $pre . $comment_form . $suff;


    //$output .= drupal_render(drupal_get_form("comment_node_{$ca_node->type}_form", (object) array('nid' => $ca_node->nid)));
  }



  return $output;
}

function projects_cockpit_main_dokumentation_view() {
  $output = '';

  if (is_numeric(arg(5))) {
    $ca_node = node_load(arg(5));

    $documentation_node = _section_projects_get_documentation_by_ca($ca_node);
    if(! is_object($documentation_node))
        return false;
    
    $documentation_node = node_load($documentation_node->nid);

    $output .=_section_projects_render_node_tabs($documentation_node);


    $output .= "<h4>Dokumentation</h4>";



    //$timespan_items = field_get_items('node', $ca_node, 'field_ca_timespan');
    //$output .= "zeitlicher Rahmen: " . drupal_render(field_view_value('node', $ca_node, 'field_ca_timespan', $timespan_items[0]));

    $node_view = node_view($documentation_node);
    $node_view['links']['#access'] = FALSE;
    $output .= drupal_render($node_view);

    //$output .= render(node_view($ca_node, 'nm_stream'));
    //$output .= theme('nm_stream_node_comment_form', array('node' => $ca_node));

    $comments = comment_load_multiple(_nm_stream_comment_get_thread($documentation_node, COMMENT_MODE_THREADED, 0));
    if (!empty($comments)) {
      comment_prepare_thread($comments);
    }

    $comments_container = '';
    foreach ($comments as $comment) {
      $opi = theme('nm_stream_node_comment', array('comment' => $comment));

      //dpm($comment->divs);
      $is_threaded = isset($comment->divs) && variable_get('comment_default_mode_' . $documentation_node->type, COMMENT_MODE_THREADED) == COMMENT_MODE_THREADED;

      $prefix = '';
      $suffix = '';
      if ($is_threaded) {
        $prefix = $comment->divs <= 0 ? str_repeat('</div>', abs($comment->divs)) : "\n" . '<div class="indented">';

        // Close all open divs.
        if ($is_threaded && !empty($comment->divs_final)) {
          $suffix = str_repeat('</div>', $comment->divs_final);
        }
      }

      $comments_container .= $prefix . $opi . $suffix;
    }


    $pre = '<div class="nm-stream-node-container" id="nm-stream-node-comment-' . $documentation_node->nid . '">';
    $suff = '</div>';

    $output = $output;


    $comment_form = theme('nm_stream_node_comment_form', array('node' => $documentation_node));
    $output .= '<div class="nm-stream-comments-section" style="padding: 15px 15px;""><h3>Kommentare</h3><div id="nm-stream-node-' . $documentation_node->nid . '"><div class="nm-stream-comments-container">' . $comments_container . '</div></div></div>' . $pre . $comment_form . $suff;


    //$output .= drupal_render(drupal_get_form("comment_node_{$ca_node->type}_form", (object) array('nid' => $ca_node->nid)));
  }



  return $output;
}

function section_projects_action_info () {
 return array(
  'section_projects_sign_inform_action' => // The function to call
   array(
   'type' => 'signing actions',
   'label' => t('Send e-mails to all users that need to be informed about the signing of a contract'),
   'configurable' => FALSE, // Has a config form
   'triggers' => array(
    'node_update', // Availability in the triggers GUI
    ),
   )
     ,
     'section_projects_reset_signatures' => // The function to call
   array(
   'type' => 'signing actions',
   'label' => t('Reset all signatures if a node is updated'),
   'configurable' => FALSE, // Has a config form
   'triggers' => array(
    'node_update', // Availability in the triggers GUI
    ),
   )
     ,

     );

   }

   function section_projects_reset_signatures($entity, $context)
{
    $the_node = @$context['node'];
    $original = $the_node->original;

    //$node -> type projects_cooperation_agreement
    //oder projects_objective
    switch ($the_node->type)
    {
        case 'projects_cooperation_agreement':
            $fields_to_compare = array(
                'body["und"][0]["value"]',
                'field_ca_timespan["und"][0]["value"]',
                'field_ca_timespan["und"][0]["value2"]',
                'field_ca_expectation_academy["und"][0]["value"]',
                'field_ca_expectation_po["und"][0]["value"]',
                'field_ca_result["und"][0]["value"]',
                'field_ca_students_role["und"][0]["value"]',
                'field_ca_partners_role["und"][0]["value"]',
                'field_ca_instructors_role["und"][0]["value"]',
                'field_ca_cooperation_rules["und"][0]["value"]',
                'field_ca_course_group_ref["und"][0]["target_id"]',
                'field_ca_proposal_ref["und"][0]["target_id"]',
                'field_ca_student_refs["und"][0]["target_id"]',
                'group_group["und"][0]["value"]'
            );
            break;
        case 'projects_objective':
            $fields_to_compare = array(
                'body["und"][0]["value"]',
                'field_objective_motivation["und"][0]["value"]',
                'field_objective_task["und"][0]["value"]',
                'field_objective_matching["und"][0]["value"]',
                'field_ca_ref["und"][0]["target_id"]',
            );
            break;
        default: return true;
            break;
    }

    //ueberpruefe original und neue version auf gleichheit
    $somethinghaschanged = false;
    foreach ($fields_to_compare as $cmp_field)
    {
        //pfui. sorry, aber war die einzige mglk, ohne riesen if-konstrukte.
        $compare_value_node = eval('return $the_node->' . $cmp_field . ';');
        $compare_value_original = eval('return $original->' . $cmp_field . ';');
        #   dpm($compare_value_node);
        if ($compare_value_original != $compare_value_node)
        {
            $somethinghaschanged = true;
        }
    }


    if ($somethinghaschanged)
    { # dpm("change! Reset signature");
        //reset signature
        $the_node = node_load($the_node->nid, null, true);
        $the_node->field_seal['und'][0]['value'] = 0;
        node_save_action($the_node);
         drupal_set_message(("Alle Unterschriften wurden automatisch zurückgezogen, da sich der Inhalt verändert hat."));

    }

    return true;
}

 /* Implements hook_node_access_records().
*/
function section_projects_node_access_records($node) {

  /*$sids = array();
  // handle the Section node itself
  if ($node->type == OA_SECTION_TYPE) {
    if (!oa_section_is_public($node)) {
      $sids[] = $node->nid;
    }
  }
  // Now handle pages within the Section
  else if (!empty($node->{OA_SECTION_FIELD})) {
    foreach ($node->{OA_SECTION_FIELD}[LANGUAGE_NONE] as $entity_ref) {
      $section = node_load($entity_ref['target_id']);
      if (!oa_section_is_public($section)) {
        $sids[] = $entity_ref['target_id'];
      }
    }
  }
  if (empty($sids)) {
    return array();
  }*/
        $grants =  array();
         $sids = array();
  #  $sids = array(1478);
/*
      $tagebuch = _section_projects_get_nodes(NM_PROJECTS_TAGEBUCH);

    $tagebuch_objects = node_load_multiple(array_keys($tagebuch));
foreach($tagebuch_objects as $tbo)
{   //privater eintrag
    if($tbo->field_nm_privacy['und'][0]['value'] ==1)
            $sids[] = $tbo->nid;
}*/

if($node->type === NM_PROJECTS_TAGEBUCH && @(int)($node->field_nm_privacy['und'][0]['value']) ===1)
   $sids[] = $node->nid;
  foreach ($sids as $sid) {
    $grants[] = array (
      'realm' => basename(dirname(__FILE__)),
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return !empty($grants) ? $grants : array();
}
 /* Implements hook_node_grants().
*/
function section_projects_node_grants($account, $op) {

 /* $sections = oa_get_sections();
  // returns a list of all section IDs
  foreach ($sections as $sid) {
    // determine if the user is a member of this section
    if (user_in_organization($sid, $account) ||
      user_in_team($sid, $account) ||
      user_in_users($sid, $account)) {
        $grants[OA_ACCESS_REALM][] = $sid;
    }
  }*/
   #
     $grants =  array();

  /* // Das lass ich mal Anschauungsobjekt drinnen. Funzioniert, ist aber aufwändig. Oft genügt, wenn man einen Key $user->uid hernimmt.
   * //und hier checken wir ob wir auf die gesperrten tagebucheintraege zugreifen koennen
    $tagebuch = _section_projects_get_nodes(NM_PROJECTS_TAGEBUCH);
    $tagebuch_objects = node_load_multiple(array_keys($tagebuch));
    #dpm($tagebuch_objects);
     foreach($tagebuch_objects as $tbo)
     {if(count($tbo->field_nm_privacy))
     {
         if((int)($tbo->field_nm_privacy['und'][0]['value']) ===1 && $tbo->uid === $account->uid)
               $grants[basename(dirname(__FILE__))][]   =  $tbo->uid;
     }
     }*/
      $grants[basename(dirname(__FILE__))][]   =  $account->uid;

   # dpm(node_load(1489));

   /*     $grants[basename(dirname(__FILE__))][] = 1478;
        $grants[basename(dirname(__FILE__))][] =  1483;
        $grants[basename(dirname(__FILE__))][] =  1479;
         $grants[basename(dirname(__FILE__))][] =  1484;*/
  return  $grants ;
    }

    //TODO Permissions einbauen!
    function section_projects_og_user_access_alter(&$perm, $context) {
 global $user;
# dpm($context);
 #dpm()
    ;
    /*teilnehmer? dürfen felder der lernzielvb sehen*/
    { // ansicht lernzielvereinbarung
        $perm['view field_objective_task field'] = true;
        $perm['view field_objective_motivation field'] = true;
        $perm['view field_ca_ref field'] = true;
        $perm['view field_objective_matching field'] = true;
    }


    /* studenten, die auf lernzielvereinbarungen zugeifen dürfne,. dürfen auch die felder editieren */
    if(node_access('view',$context['group']))
    {
            $perm['update any ' . NM_PROJECTS_ZIELVEREINBARUNG . ' content'] = true;
    $perm['update field_objective_motivation field'] = true;
    $perm['update field_objective_matching field'] = true;
    $perm['update field_objective_task field'] = true;
    }



    /* studenten, die auf dokumentation zugeifen dürfne,. dürfen auch die felder editieren */
    /* todo kein zugriff auf wysiwyg */
    $perm['update any ' . NM_PROJECTS_DOKUMENTATION . ' content'] = true;
    $perm['update body field'] = true;
 #   $perm['view body field'] = true;


    //blog eintrag erstellen
    $perm['create projects_blog content'] = true;
    $perm['update field_nm_privacy field'] = true;
     
    $perm['update field_blog_type field'] = true;
    //    $perm['create field_blog_type content'] = true;
    //    $perm['view field_blog_type field'] = true;
    //     $perm['update body field'] = true;


    /* kann das raus?
      $perm['update  field_nm_privacy field'] = true;
      $perm['create field_nm_privacy content'] = true;
      $perm['view field_nm_privacy field'] = true;
     */



    return ;
  // If user ID 2 doesn't already have a permission then enable it.
  if (empty($perm['foo']) && $context['account']->uid = 2) {
    $perm['foo'] = TRUE;
  }
}
/*
function section_projects_field_access($op, $field, $entity_type, $entity, $account) {
return true;
}*/
/**
 * Implements hook_node_access().
 */

function section_projects_node_access($node, $op, $account) {

    $signing_state = @$node->field_seal;
    $signing_state = (int) ($signing_state['und'][0]['value']);
       $signatures = array();
    if (($signing_state & bindec('100')) == bindec('100'))
        $signatures[] = 'dozent';
    if (($signing_state & bindec('010')) == bindec('010'))
        $signatures[] = 'student';
    if (($signing_state & bindec('001')) == bindec('001'))
        $signatures[] = 'partner';
  if (
    // The $node argument can be either a $node object or a machine name of
    // node's content type. It is called multiple times during a page load
    // so it is enough if you perform the check once you get the object.
    is_object($node)
          &&
          ( ($node->type == 'projects_cooperation_agreement') && (count($signatures)==3)
            ||  ($node->type == 'projects_objective')  && (count($signatures)==2  ))
    // Operation on which you want to act: "create", "delete", "update", "view".
   && ( $op == 'update'
      || $op =='delete'
     )

  ) {
    // Check if the node is published.
     { //das würde dann auch beim view auslösen. deshalb nicht anzeigen...
         #drupal_set_message('Dies kann nicht bearbeitet werden, da bereits alle Beteiligten unterschrieben haben.','warning');

      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}
function section_projects_sign_inform_action($entity, $context)
{   $the_node = @$context['node'];
    $original = $the_node->original;

    //muss angepasst werden fuer weitere signiertypen
     if(!in_array($the_node->type,array('projects_cooperation_agreement', 'projects_objective')))
             return true;

    /* signierstatus auf alter und aktualisierter version */

   //das ist wichtig, sonst funktioniert das nicht.
    entity_get_controller('node')->resetCache(array($the_node->nid));
    $the_node = node_load($the_node->nid);


    $signing_state_new = $the_node->field_seal;
    $signing_state_new = (int) ($signing_state_new['und'][0]['value']);



    $signing_state_old = $original->field_seal;
    $signing_state_old = (int) ($signing_state_old['und'][0]['value']);

    //keine aenderung - return
    if ($signing_state_new == $signing_state_old)
        return true;

    $signed_all_old = array();

    if (($signing_state_old & bindec('100')) == bindec('100'))
        $signed_all_old[] = 'dozent';
    if (($signing_state_old & bindec('010')) == bindec('010'))
        $signed_all_old[] = 'student';
    if (($signing_state_old & bindec('001')) == bindec('001'))
        $signed_all_old[] = 'partner';

    $signed_all_new = array();
    if (($signing_state_new & bindec('100')) == bindec('100'))
        $signed_all_new[] = 'dozent';
    if (($signing_state_new & bindec('010')) == bindec('010'))
        $signed_all_new[] = 'student';
    if (($signing_state_new & bindec('001')) == bindec('001'))
        $signed_all_new[] = 'partner';

    $sign_intersect = array_intersect($signed_all_new, $signed_all_old);
    $new_sigs = array_diff($signed_all_new, $signed_all_old);

    $lost_sigs = array_diff($signed_all_old, $signed_all_new);

  #  dpm($lost_sigs);
    if (count($new_sigs))
    {
        //neue unterschrift
        $diff = array_diff($signed_all_new, $signed_all_old);
        $text = t("was signed by:");
    } elseif (count($lost_sigs))
    {
        //unterschrift weg
        $diff = array_diff($signed_all_old, $signed_all_new);
        $text = t("Signatures withdrawn by");
    }

    //betroffene nutzer laden und Mail bauen
    //der naechste abschnitt ist nur dafuer da um die nutzer zu laden
    if (count($new_sigs) || count($lost_sigs))
    {
        $THIS_IS_A_LERNZIELVEREINBARUNG = false;

        /* projektvorschlag laden */
        $the_proposal_id = @$the_node->field_ca_proposal_ref['und'][0]['target_id'];
        $das_was_hinten_an_die_url_kommt = $the_node->nid;

        //fails wenn lernzielvereinbarung genutzt wird
        if (!$the_proposal_id)
        { $THIS_IS_A_LERNZIELVEREINBARUNG = TRUE;
            $the_lernziels_coop_id = $the_node->field_ca_ref['und'][0]['target_id'];
            $the_lernziels_coop = node_load($the_lernziels_coop_id);
            $the_proposal_id = $the_lernziels_coop->field_ca_proposal_ref['und'][0]['target_id'];
            $das_was_hinten_an_die_url_kommt = $the_node->field_ca_ref['und'][0]['target_id'];

            $ca_ref = $the_node->field_ca_ref['und'][0]['target_id'];
            $ca_object = node_load($ca_ref);


        }
        $the_proposal = node_load($the_proposal_id);

        /* kursgruppe zum projektvorschlag laden */
        if ($THIS_IS_A_LERNZIELVEREINBARUNG)
            $the_course_group_id = $ca_object->field_ca_course_group_ref['und'][0]['target_id'];
        else
            $the_course_group_id = $the_node->field_ca_course_group_ref['und'][0]['target_id'];


        $the_course_group = node_load($the_course_group_id);

        /* lade kursgruppenmitglieder aus db */
        $course_group_query = new EntityFieldQuery();
        $course_group_query->entityCondition('entity_type', 'user')
                ->fieldCondition('og_user_node', 'target_id', $the_course_group->nid, '=');
        $results = $course_group_query->execute();
        $course_group_user_uids = array_keys($results['user']);
        $course_group_users = user_load_multiple($course_group_user_uids);  // $users is now an array of user entity objects

        /* der echte Kurs, also die Lehrveranstaltung */
        /* $the_course = node_load($the_course_group->og_group_ref['und'][0]['target_id']);
          dpm($the_course); */

        /* Lade Organisation */
        $the_org_id = $the_proposal->field_partner_organization_ref['und'][0]['target_id'];
        $the_org = node_load($the_org_id);
        $the_org_contacts = $the_org->field_field_po_contact_person['und'];
        foreach ($the_org_contacts as $id_cand)
        {
            $the_org_contacts_ids[] = $id_cand['target_id'];
        }
        $organisation_users = user_load_multiple($the_org_contacts_ids);
        #dpm($organisation_users);
// braucht man das??
        /*
          $course_query = new EntityFieldQuery();
          $course_query->entityCondition('entity_type', 'user')
          ->fieldCondition('og_user_node', 'target_id', $the_course_group->og_group_ref['und'][0]['target_id'], '=');

          $results = $course_query->execute();*/

/*
          // Or,
          $course_user_uids = array_keys($results['user']);
          $course_users = user_load_multiple($course_user_uids);  // $users is now an array of user entity objects
          dpm("kursmitglierd");
          dpm($course_users);

         */

       switch($the_node->type)
     {
         case 'projects_cooperation_agreement':
      //get dozenten of this course
      //only possible if course group is set
      if (!empty($the_node->field_ca_course_group_ref)) {
        $course_group_nid = $the_node->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        //$course = node_load($course_nid);
        //$dozenten = og_membership_load_multipleF(ALSE, array('gid' => $course_nid, 'entity_type' => 'user'));
        $dozenten = custom_general_get_users_in_group_by_role($course_nid, array('kurs-dozent'));
        //dpm($dozenten);


        }

      break;
    case 'projects_objective':
      //dpm(($node));
      if (!empty($the_node->field_ca_ref)) {
        $ca_node_nid = $the_node->field_ca_ref[LANGUAGE_NONE][0]['target_id'];
        $ca_node = node_load($ca_node_nid);
        $course_group_nid = $ca_node->field_ca_course_group_ref[LANGUAGE_NONE][0]['target_id'];
        $course_group = node_load($course_group_nid);
        $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        //$course = node_load($course_nid);
        //$dozenten = og_membership_load_multipleF(ALSE, array('gid' => $course_nid, 'entity_type' => 'user'));
        $dozenten = custom_general_get_users_in_group_by_role($course_nid, array('kurs-dozent'));
          #dpm($results);
      }
      break;
      }


        /* Die Kooperationsvereinbarung %s wurde von allen Beteiligten unterschrieben, ab sofort sind keine Änderungen daran mehr möglich.
          <br><br>Viel Erfolg bei der Umsetzung! */

        /* Der Kooperationsvereinbarung %s im Projekt %s wurde eine Unterschrift hinzugefügt. */
        /* Es wurde eine Unterschrift aus der Kooperationsvereinbarung %s  im Projekt %s  gestrichen! */


        $url_tpl_jump = 'projects/partners/' . $the_org_id . '/' . $the_proposal->nid . '/cockpit/' . $das_was_hinten_an_die_url_kommt;
        switch ($the_node->type)
        {
            case 'projects_objective':
                $url_for_context = url($url_tpl_jump, array('fragment' => 'lernzielvereinbarung', 'absolute' => true));
                $type_context = "Lernzielvereinbarung";
                $missing_sigs = array_diff(array('dozent','student'),$signed_all_new );
                break;
            case 'projects_cooperation_agreement':
                $url_for_context = url($url_tpl_jump, array('fragment' => 'kooperationsvereinbarung', 'absolute' => true));
                $type_context = "Kooperationsvereinbarung";
                $missing_sigs = array_diff( array('dozent', 'partner','student'),$signed_all_new);
                break;
        }

        $mail_content_tpl_add = ('Der %s %s im Projekt %s wurde eine Unterschrift hinzugefügt.');
        $mail_content_tpl_remove = ('Es %s aus der %s %s  im Projekt %s  gestrichen!');
        $mail_content_tpl_all_sigs = ('Die %s %s im Projekt %s wurde von allen Beteiligten unterzeichnet. Eine Änderung ist nicht mehr möglich. Viel Gelingen!');
        $mail_content_tpl_missings = ('Es fehl%s noch die Unterschrift%s von:');
        $tpl_readable_users= array('partner'=> 'Kooperationspartner', 'dozent'=>'Dozent','student'=>'Student');

        $mail_content_add = sprintf($mail_content_tpl_add, $type_context, l($the_node->title, $url_for_context), $the_proposal->title);
        $mail_content_remove = sprintf($mail_content_tpl_remove,(count($lost_sigs) ===1?'wurde eine Unterschrift':'wurden '.count($lost_sigs).' Unterschriften'), $type_context, l($the_node->title, $url_for_context), $the_proposal->title);
        $mail_content_all_sigs = sprintf($mail_content_tpl_all_sigs, $type_context, l($the_node->title, $url_for_context), $the_proposal->title);

        if(count($missing_sigs)>0)
        {
        if(count($missing_sigs)>1)
            $mail_content_missings = sprintf($mail_content_tpl_missings, 'en','en');
        else
              $mail_content_missings = sprintf($mail_content_tpl_missings, 't','');
        foreach($missing_sigs as $missing_role)
            $mail_content_missings.="\r\n".$tpl_readable_users[$missing_role];
        }
        else $mail_content_missings ="";

        if (count($new_sigs))
        {
            $text = $mail_content_add;
        } elseif (count($lost_sigs))
        {
            //unterschrift weg

            $text = $mail_content_remove;
        }
        if(((count($signed_all_new) ==3) && !$THIS_IS_A_LERNZIELVEREINBARUNG) || (count($signed_all_new) == 2 && $THIS_IS_A_LERNZIELVEREINBARUNG))
        {
            $text = $mail_content_all_sigs;
        }
        $text.="\r\n".$mail_content_missings;
        $module = 'section_projects';
        $key = 'signature_has_changed';
        $language = language_default();
        $params = array(
            '@text' => ($text),
            '@diff' => implode("\r\n", $diff) //. "\r\n" . "debug:" . "\r\n" . "states" . "\r\n" . $signing_state_new . "///" . $signing_state_old . "\r\n" . '$signed_all_new' . "\r\n" . implode("\r\n", $signed_all_new) . "\r\n" . '$signed_all_old' . "\r\n" . implode("\r\n", $signed_all_old)
        );

        {
            foreach($dozenten as $dozminiinfo)
                $dozenten_ids[] = $dozminiinfo->uid;
            $dozenten_objects = user_load_multiple($dozenten_ids);
            $author_of_thingy = user_load($the_node->uid);
            if(@$the_node->field_ca_ref['und'][0]['target_id'])
            {
                $ca = node_load($the_node->field_ca_ref['und'][0]['target_id']);
            }
            else $ca = $the_node;
            foreach( $ca->field_ca_student_refs['und'] as $additional_user)
            {
                $directly_added_students_ids[] = $additional_user['target_id'];
            }
            $directly_added_student = user_load_multiple($directly_added_students_ids);
          
            //$organisation_users  $course_group_users
            $all_affected_users = array_merge($dozenten_objects, $directly_added_student,$organisation_users, $course_group_users, array($author_of_thingy));

            $singular_affected_users = array();
            foreach($all_affected_users as $aff_user)
            {
                if(!in_array($aff_user,$singular_affected_users))
                        $singular_affected_users[] = $aff_user;
            }

        }
        //  alle mails, dies interessiert
        foreach ($singular_affected_users as $user_to_mail_to)
        {
            $params_new = $params;
            $params_new['@name'] = $user_to_mail_to->name;
           # dpm($params_new);
 drupal_mail($module, $key, 'bernhard.strehl@gmail.com', $language, $params_new);
            //drupal_mail($module, $key, $user_to_mail_to->mail, $language, $params_new);
        }
        }
    //es hat sich nichts getan - donothing
}

/**
* Implements hook_mail().
*/
function section_projects_mail($key, &$message, $params)
{
    switch ($key)
    {
        case 'signature_has_changed':

            $message['subject'] = t("Geänderte Unterschrift");
            $message['body'] = array();
            $message['body'][] = t("Hello")." ".t("@name", $params).',';;
            $message['body'][] = nl2br($params['@text']);             #t("@text", $params);
          # $message['body'][] = t("@diff", $params);

            break;
    }
}

/**
 * Implementing hook_preprocess_HOOK
 * @param type $vars
 */
function section_projects_preprocess_section_projects_tools(&$vars) {
  //dpm('preprocessing');
}
